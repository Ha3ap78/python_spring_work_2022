#todo: Изучаем пакет pandas
#
# После установки библиотеки pandas выполните следующие действия:
#
# Изучите справку по модулю (для чего нужен модуль , какие возможности предоставляет)
# Найдите расположение директории модуля pandas и изучите его содержимое
# Получите список доступных атрибутов модуля pandas
# Импортируйте модуль pandas в исполняемый скрипт
# С помощью модуля pandas ознакомьтесь со структурой  DataFrame, фильтрации данных,
# загрузки данных из формата сsv (рассмотрите примеры статьи)
# Установите библиотеку matplotlib, создайте график на своем наборе данных.

#Опорная статья:  https://egorovegor.ru/pandas-obrabotka-i-analiz-dannyh-v-python/

import pandas as pd
import matplotlib.pyplot as plt

def create_table():
    """
        Объект DataFrame имеет два индекса по столбцам и строкам. Если индекс
        по строкам не указан вручную, то pandas задает его автоматически.
        ссылка: https://egorovegor.ru/pandas-obrabotka-i-analiz-dannyh-v-python/
        """
    df = pd.DataFrame({
    'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
    '2020 год': [100070, 68677, 58056, 48286],
    '2021 год': [111092, 75958, 63410, 52529]})

    return df

def add_index():
    """
        Вызывая метод DataFrame мы передали ему аргумент index со списком именованных индексов.
        """
    df = pd.DataFrame({
        'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
        '2020 год': [100070, 68677, 58056, 48286],
        '2021 год': [111092, 75958, 63410, 52529],
    }, index=['MSK', 'SPB', 'MO', 'LO'])
    return df

def filter_all():
    """
        Pandas позволяет производить фильтрацию вывода по индексам и столбцам.
        Так же можно комбинировать индексы и колонки, использовать слайсы и логические выражения
        """
    df = pd.DataFrame({
        'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
        '2020 год': [100070, 68677, 58056, 48286],
        '2021 год': [111092, 75958, 63410, 52529],
    }, index=['MSK', 'SPB', 'MO', 'LO'])
    print('Фильтр по столбцу\n', df['Регион РФ'], '\n')  # фильтр по столбцу
    print('По строковому индексу\n', df.loc['MSK'], '\n')
    print('По срезам\n', df[3:], '\n')
    print('С использованием условий\n', df[df["2020 год"] > 50000]['Регион РФ'], '\n')

def rename_columns():
    """
        Вы можете создавать, удалять и переименовывать ваши столбцы в любой момент времени
        Важно: результат выполнение метода rename возвращает новый измененный объект DataFrame,
        поэтому переназначь основной экземпляр DataFrame
        """
    df = pd.DataFrame({
        'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
        '2020 год': [100070, 68677, 58056, 48286],
        '2021 год': [111092, 75958, 63410, 52529],
    }, index=['MSK', 'SPB', 'MO', 'LO']
    )
    dfr = df.rename(columns={'2020 год': '2020', '2021 год': '2021'})
    return dfr

def create_columns():
    """
        Создание новой колонки в таблице
        """
    df = pd.DataFrame({
        'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
        '2020 год': [100070, 68677, 58056, 48286],
        '2021 год': [111092, 75958, 63410, 52529],
    }, index=['MSK', 'SPB', 'MO', 'LO']
    )
    df['Рост'] = df['2021 год'] - df['2020 год']
    return df

def del_columns():
    """
        Для удаления столбца существует метод drop, так же необходимо передать в
        аргумент axis значение index или columns
        Важно: результат выполнение метода drop возвращает новый измененный объект DataFrame,
         поэтому не забудьте переназначить DataFrame
        """
    df = pd.DataFrame({
        'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
        '2020 год': [100070, 68677, 58056, 48286],
        '2021 год': [111092, 75958, 63410, 52529],
    }, index=['MSK', 'SPB', 'MO', 'LO']
    )
    df['Рост'] = df['2021 год'] - df['2020 год']
    print(df, '\n')
    df_drop = df
    drop = df_drop.drop(["Рост"], axis="columns")
    print(drop)

def create_from_csv():
    """
        Загрузка данных из файла csv
        """
    text = pd.read_csv('income.csv')
    print(text)

def save_to_csv():
    """
       Запись данных таблицы в файл csv
       """
    text = create_columns()
    text.to_csv('income.csv')

def create_from_xlsx():
    """
            Загрузка данных из файла Excel
            """
    text = pd.read_excel("income.xlsx")
    print(text)

def save_to_xlsx():
    """
       Запись данных таблицы в файл Excel
       """

    text = create_columns()
    text.to_excel('income.xlsx')

def grafic_plot():
    """
        Самый просто способ сгенерировать график, это передать обработчику
        для одной из координат, для второй он возьмет информацию из индекса.
        """

    df = pd.DataFrame({
        'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
        '2020 год': [100070, 68677, 58056, 48286],
        '2021 год': [111092, 75958, 63410, 52529],
    }, index=['MSK', 'SPB', 'MO', 'LO'])
    df.plot(kind='barh', y='2020 год', color='green')
    plt.show()

def grafic_plot_all():
    """
        Как объединить графики в одной диаграмме?
        Очень просто, нужно использовать метод pivot из библиотеки pandas.
        """

    df = pd.DataFrame({
        'Регион РФ': ['Москва', 'Санкт-Петербург', 'Московская область', 'Ленинградская область'],
        '2020 год': [100070, 68677, 58056, 48286],
        '2021 год': [111092, 75958, 63410, 52529],
    }, index=['MSK', 'SPB', 'MO', 'LO'])
    df.pivot(columns="Регион РФ").plot(kind='bar')
    plt.show()


